// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalleeServiceClient is the client API for CalleeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalleeServiceClient interface {
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
}

type calleeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalleeServiceClient(cc grpc.ClientConnInterface) CalleeServiceClient {
	return &calleeServiceClient{cc}
}

func (c *calleeServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, "/grpc_go_connection_demo.callee.CalleeService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalleeServiceServer is the server API for CalleeService service.
// All implementations must embed UnimplementedCalleeServiceServer
// for forward compatibility
type CalleeServiceServer interface {
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	mustEmbedUnimplementedCalleeServiceServer()
}

// UnimplementedCalleeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalleeServiceServer struct {
}

func (UnimplementedCalleeServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedCalleeServiceServer) mustEmbedUnimplementedCalleeServiceServer() {}

// UnsafeCalleeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalleeServiceServer will
// result in compilation errors.
type UnsafeCalleeServiceServer interface {
	mustEmbedUnimplementedCalleeServiceServer()
}

func RegisterCalleeServiceServer(s grpc.ServiceRegistrar, srv CalleeServiceServer) {
	s.RegisterService(&CalleeService_ServiceDesc, srv)
}

func _CalleeService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalleeServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_go_connection_demo.callee.CalleeService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalleeServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalleeService_ServiceDesc is the grpc.ServiceDesc for CalleeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalleeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_go_connection_demo.callee.CalleeService",
	HandlerType: (*CalleeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _CalleeService_GetItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "callee/pb/service.proto",
}
