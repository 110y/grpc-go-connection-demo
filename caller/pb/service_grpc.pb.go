// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallerServiceClient is the client API for CallerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallerServiceClient interface {
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
}

type callerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallerServiceClient(cc grpc.ClientConnInterface) CallerServiceClient {
	return &callerServiceClient{cc}
}

func (c *callerServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, "/grpc_go_connection_demo.caller.CallerService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallerServiceServer is the server API for CallerService service.
// All implementations must embed UnimplementedCallerServiceServer
// for forward compatibility
type CallerServiceServer interface {
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	mustEmbedUnimplementedCallerServiceServer()
}

// UnimplementedCallerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCallerServiceServer struct {
}

func (UnimplementedCallerServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedCallerServiceServer) mustEmbedUnimplementedCallerServiceServer() {}

// UnsafeCallerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallerServiceServer will
// result in compilation errors.
type UnsafeCallerServiceServer interface {
	mustEmbedUnimplementedCallerServiceServer()
}

func RegisterCallerServiceServer(s grpc.ServiceRegistrar, srv CallerServiceServer) {
	s.RegisterService(&CallerService_ServiceDesc, srv)
}

func _CallerService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallerServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_go_connection_demo.caller.CallerService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallerServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallerService_ServiceDesc is the grpc.ServiceDesc for CallerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_go_connection_demo.caller.CallerService",
	HandlerType: (*CallerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _CallerService_GetItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caller/pb/service.proto",
}
